<?php

declare(strict_types=1);

use Magento\Framework\Escaper;
use Magento\Framework\View\Element\Template;
use WindAndKite\Storyblok\ViewModel\StoryblokBridgeConfig;

/** @var Template $block */
/** @var Escaper $escaper */

/** @var StoryblokBridgeConfig $storyblokConfig */
$storyblokConfig = $block->getData('storyblok_bridge_config');

if (!$storyblokConfig->shouldInitializeStoryblokBridge()) {
    return;
}

$ajaxUrl = $storyblokConfig->getAjaxUrl();
?>
<script type="text/javascript">
    (function() {
        let storyblokInstance = null;
        const queuedOnCalls = [];

        window.StoryblokBridge = function(options) {
            if (storyblokInstance) {
                return storyblokInstance;
            }
            const proxy = {
                on: function() {
                    queuedOnCalls.push(arguments);
                }
            };
            return proxy;
        };

        const initActualStoryblokBridge = () => {
            if (storyblokInstance) {
                return;
            }

            const { StoryblokBridge: ActualStoryblokBridge } = window;

            storyblokInstance = new ActualStoryblokBridge({
                preventClicks: true
            });

            queuedOnCalls.forEach(args => {
                storyblokInstance.on.apply(storyblokInstance, args);
            });

            storyblokInstance.on(
                ['published', 'change'],
                () => window.location.reload()
            );

            let controller = { abort: () => {} };
            let lastBlockIds = [];

            storyblokInstance.on('enterEditmode', ({ blockId, storyId }) => {
                const parentBlok = document.querySelector(`[data-blok-uid="${storyId}-${blockId}"]`);

                if (!parentBlok) {
                    console.warn(`Storyblok Bridge: Element with data-blok-uid="${storyId}-${blockId}" not found.`);
                    return;
                }

                parentBlok.querySelectorAll('[data-blok-c]').forEach(childBlok => {
                    lastBlockIds.push(JSON.parse(childBlok.getAttribute('data-blok-c')).uid);
                })
            });

            /**
             * Fetches updated block HTML from the server and updates the DOM.
             * @param {object} story The current Storyblok story object.
             * @param {AbortSignal} signal The AbortSignal to cancel the fetch request.
             * @returns {Promise<void>} A Promise that resolves when the update is complete.
             */
            const updateBlocksViaAjax = (story, signal) => {
                if (!story || typeof story.id === 'undefined') {
                    console.warn("Storyblok Bridge: 'story' object or 'story.id' is undefined. Skipping AJAX update.");
                    return Promise.resolve();
                }

                return fetch('<?= $escaper->escapeUrl($ajaxUrl) ?>', {
                    signal,
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ story, _storyblok: story.id })
                })
                    .then(request => {
                        if (!request.ok) {
                            return request.text().then(errorText => {
                                console.error("Storyblok Bridge Input Error: HTTP", request.status, errorText);
                                throw new Error(`HTTP error! status: ${request.status}`);
                            });
                        }
                        return request.json();
                    })
                    .then(response => {
                        for (const blockUid in response) {
                            if (Object.prototype.hasOwnProperty.call(response, blockUid)) {
                                const targetElement = document.querySelector(`[data-blok-uid="${story.id}-${blockUid}"]`);

                                if (targetElement) {
                                    targetElement.outerHTML = response[blockUid];
                                } else {
                                    console.warn(`Storyblok Bridge: Element with data-blok-uid="${blockUid}" not found for update.`);
                                }
                            }
                        }
                        storyblokInstance.enterEditmode();
                    })
                    .catch(err => {
                        if (err.name === 'AbortError') {
                            console.log("Storyblok Bridge Input: Fetch aborted.");
                        } else {
                            console.error("Storyblok Bridge Input Error:", err);
                        }
                    });
            };

            storyblokInstance.on(['input'], ({ story }) => {
                controller.abort();

                controller = new AbortController();
                const { signal } = controller;

                let currentBlokIds = story.content.body.map(el => el['_uid'])

                if (currentBlokIds.length < lastBlockIds.length) {
                    let removedBlokIds = lastBlockIds.filter(id => !currentBlokIds.includes(id));

                    removedBlokIds.forEach(id => {
                        const removedElement = document.querySelector(`[data-blok-uid="${story.id}-${id}"]`);
                        if (removedElement) {
                            removedElement.remove();
                        } else {
                            console.warn(`Storyblok Bridge: Element with data-blok-uid="${story.id}-${id}" not found for removal.`);
                        }
                    });

                    lastBlockIds = currentBlokIds;

                    return;
                }

                updateBlocksViaAjax(story, signal);
            });
        };

        const loadStoryblokScript = () => {
            if (document.getElementById('storyblok-bridge-script')) {
                return;
            }

            const script = document.createElement('script');
            script.async = true;
            script.src = "//app.storyblok.com/f/storyblok-v2-latest.js";
            script.id = "storyblok-bridge-script";
            script.onload = initActualStoryblokBridge;
            document.head.appendChild(script);
        };

        document.addEventListener('scroll', loadStoryblokScript, { once: true });
        document.addEventListener('mousemove', loadStoryblokScript, { once: true });
        document.addEventListener('keydown', loadStoryblokScript, { once: true });
        document.addEventListener('touchstart', loadStoryblokScript, { once: true });

        <?php if ($storyblokConfig->shouldInitializeStoryblokBridge()): ?>
        setTimeout(loadStoryblokScript, 0);
        <?php endif; ?>

    })();
</script>
